{"ast":null,"code":"import { ADD_NOTE, setNotes, SET_NOTES } from \"./actions\";\nconst initialState = {\n  notes: []\n};\nexport const notesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_NOTE:\n      {\n        return { ...state,\n          notes: [...state.notes, action.payload]\n        };\n      }\n\n    case SET_NOTES:\n      {\n        return { ...state,\n          notes: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nexport const saveNotes = () => async (dispatch, getState) => {\n  const notes = getState().notes;\n  await fetch(\"http://localhost:3000/notes\", {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(notes)\n  });\n  alert(\"Success\");\n};\nexport const loadNotes = () => async (dispatch, getState) => {\n  const notes = await fetch(\"http://localhost:3000/notes\").then(res => res.json()); //console.log(notes)\n\n  dispatch(setNotes(notes[0]));\n};","map":{"version":3,"sources":["/Users/devindavis/Development/code/post-work/over-engineered-clicker/main/frontend/src/notesReducer.js"],"names":["ADD_NOTE","setNotes","SET_NOTES","initialState","notes","notesReducer","state","action","type","payload","saveNotes","dispatch","getState","fetch","method","headers","body","JSON","stringify","alert","loadNotes","then","res","json"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,SAA7B,QAA8C,WAA9C;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,QAAL;AAAe;AACX,eAAO,EAAE,GAAGM,KAAL;AAAYF,UAAAA,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAV,EAAiBG,MAAM,CAACE,OAAxB;AAAnB,SAAP;AACH;;AACD,SAAKP,SAAL;AAAgB;AACZ,eAAO,EAAE,GAAGI,KAAL;AAAYF,UAAAA,KAAK,EAAEG,MAAM,CAACE;AAA1B,SAAP;AACH;;AACD;AACI,aAAOH,KAAP;AARR;AAUH,CAXM;AAaP,OAAO,MAAMI,SAAS,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACzD,QAAMR,KAAK,GAAGQ,QAAQ,GAAGR,KAAzB;AACA,QAAMS,KAAK,CAAC,6BAAD,EAAgC;AACvCC,IAAAA,MAAM,EAAE,MAD+B;AAEvCC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAF8B;AAMvCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,KAAf;AANiC,GAAhC,CAAX;AAQAe,EAAAA,KAAK,CAAC,SAAD,CAAL;AACH,CAXM;AAaP,OAAO,MAAMC,SAAS,GAAG,MAAM,OAAOT,QAAP,EAAiBC,QAAjB,KAA8B;AACzD,QAAMR,KAAK,GAAG,MAAMS,KAAK,CAAC,6BAAD,CAAL,CAAqCQ,IAArC,CAA0CC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAjD,CAApB,CADyD,CAEzD;;AACAZ,EAAAA,QAAQ,CAACV,QAAQ,CAACG,KAAK,CAAC,CAAD,CAAN,CAAT,CAAR;AACH,CAJM","sourcesContent":["import { ADD_NOTE, setNotes, SET_NOTES } from \"./actions\"\n\nconst initialState = {\n    notes: []\n}\n\nexport const notesReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_NOTE: {\n            return { ...state, notes: [...state.notes, action.payload] }\n        }\n        case SET_NOTES: {\n            return { ...state, notes: action.payload }\n        }\n        default:\n            return state\n    }\n}\n\nexport const saveNotes = () => async (dispatch, getState) => {\n    const notes = getState().notes;\n    await fetch(\"http://localhost:3000/notes\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-type': 'application/json'\n        },\n        body: JSON.stringify(notes)\n    })\n    alert(\"Success\")\n}\n\nexport const loadNotes = () => async (dispatch, getState) => {\n    const notes = await fetch(\"http://localhost:3000/notes\").then(res => res.json())\n    //console.log(notes)\n    dispatch(setNotes(notes[0]))\n}"]},"metadata":{},"sourceType":"module"}